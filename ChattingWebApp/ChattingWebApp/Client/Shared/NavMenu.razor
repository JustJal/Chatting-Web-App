@inherits FluxorComponent
@inject IDispatcher dispatcher
@inject IState<LogoutState> state
@attribute [Authorize]

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">ChattingWebApp</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="profile" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Profile
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="contacts">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Contacts
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" @onclick="Logout">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
            </NavLink>
        </li>
    </ul>
</div>

@code {

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    public string Nickname => state.Value.Nickname;

    protected override async Task OnInitializedAsync()
    {
        var user = await authenticationState;
        dispatcher.Dispatch(new LogoutOnSetNicknameAction(user.User.Identity.Name));

        await base.OnInitializedAsync();
    }

    private void Logout()
    {
        dispatcher.Dispatch(new LogoutOnExitAction(Nickname));
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
