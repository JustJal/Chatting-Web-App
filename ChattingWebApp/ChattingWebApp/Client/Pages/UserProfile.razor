@page "/profile"
@inherits FluxorComponent
@inject NavigationManager nav
@inject IState<UserProfileState> state
@inject IDispatcher dispatcher

@attribute [Authorize]
<AuthorizeView>
    <Authorized>
        @if (isLoading)
        {
            <div class="alert alert-info" role="alert">
                Loading Profile...
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <img style="border-radius: 50%; width: 150px; height: 150px;" src="@currentProfile.ProfilePhoto" />
            </div>
            <div class="d-flex justify-content-center m-2">
                <h3>@currentProfile.Nickname</h3>
            </div>
            <form class="mt-2">
                <div class="form-group">
                    <label>Profile name (this is what other people see):</label>
                    <input type="text" class="form-control" placeholder="Profile Name" @bind-value="currentProfile.Nickname">
                </div>
                <div class="form-group">
                    <label for="exampleFormControlTextarea1">Bio</label>
                    <textarea class="form-control" id="exampleFormControlTextarea1" @bind="currentProfile.AboutMe"></textarea>
                </div>
                <div class="form-group">
                    <label for="exampleFormControlFile1">Select an image:</label>
                    <InputFile OnChange="@OnInputFileChanged" />
                </div>
                <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
                <span>&nbsp;&nbsp;</span>@message
            </form>
        }
        </Authorized>
</AuthorizeView>

@code{ 
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    public Profile currentProfile => state.Value.UserProfile;
    public bool isLoading => state.Value.IsLoading;
    public string message => state.Value.ErrorMessage;


    protected override async Task OnInitializedAsync()
    {
        var user = await authenticationState;

        if (!user.User.Identity.IsAuthenticated)
            nav.NavigateTo("/");

        dispatcher.Dispatch(new UserProfileGetAction());
    }

    public async Task OnInputFileChanged(InputFileChangeEventArgs fileChangeEventArgs)
    {
        //Get the file
        var file = fileChangeEventArgs.File;

        if(file.ContentType.ToString() != "image/png")
        {
            dispatcher.Dispatch(new UserProfileSetErrorMessageAction("File must be an Image in png format"));
            return;
        }
        else if (file.Size > 512000)
        {
            dispatcher.Dispatch(new UserProfileSetErrorMessageAction("File size must be below 512Kb"));
            return;
        }

        //read the file
        var buffer = new byte[file.Size];
        await file.OpenReadStream(512000).ReadAsync(buffer);

        //Parse to bytArray Base64String
        currentProfile.ProfilePhoto = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private void SaveChanges()
    {
        if (string.IsNullOrEmpty(currentProfile.Nickname))
            return;

        dispatcher.Dispatch(new UserProfileUpdateProfileAction(currentProfile));
    }
}

