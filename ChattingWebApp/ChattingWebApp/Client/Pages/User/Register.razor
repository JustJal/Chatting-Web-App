@inherits FluxorComponent
@inject IDispatcher dispatcher
@inject IState<RegisterState> state
@page "/register"

<h3>Register</h3>
<EditForm Model="@_user" OnValidSubmit="@Regist">
    <DataAnnotationsValidator />
    <div class="container">

        <div class="row mt-2">
            <InputText Type="text" @bind-Value="_user.Nickname" Placeholder="Nickname" />
        </div>
        <div class="row mt-2">
            <InputText Type="password" @bind-Value="_user.Password" Placeholder="Password" />
        </div>
        <div class="row mt-2">
            <InputText Type="password" @bind-Value="_user.RepeatPassword" Placeholder="Repeat Password" />
        </div>
    </div>
    <button type="button" class="btn btn-primary mt-2 mr-2" @onclick="Validate">Validate</button>
    @if (isValid)
    {
        <button type="submit" class="btn btn-primary mt-2">Register</button>
    }
    <ValidationSummary />
</EditForm>
<div>
    <p>@message</p>
</div>

@code {

    private User _user => state.Value.User;

    private string message => state.Value.ErrorMessage;
    private bool isValid => state.Value.IsValid;

    public async Task Validate()
    {
        dispatcher.Dispatch(new UserErrorMessageSetAction(""));

        _user.Nickname = _user.Nickname.Replace(" ", "_").Trim();

        await Task.Run( () => dispatcher.Dispatch(new UserValidateAction(_user)));

        StateHasChanged();
    }
    public void Regist()
    {
        dispatcher.Dispatch(new UserRegisterAction(_user));
    }
}
